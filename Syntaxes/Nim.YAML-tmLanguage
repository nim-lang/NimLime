# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Nim
scopeName: source.nim
fileTypes: ["nim", "nims", "nimble"]
uuid: fa6f2c1c-dd3f-4bcd-b2be-d05312be4080

patterns:
- comment: A multiline comment.
  name: comment.line.number-sign.multi-comment.nim
  begin: (\#\[\s*(TODO|todo)?)
  end: (.*]\#)
  captures:
    '1': {name: punctuation.definition.multi-comment.nim}
    '2': {name: invalid.illegal.TODO.nim}

- comment: A multiline documentation comment.
  name: comment.line.number-sign.multi-doc-comment.nim
  begin: (\#\#\[\s*(TODO|todo)?)
  end: (.*]\#\#)
  captures:
    '1': {name: punctuation.definition.multi-doc-comment.nim}
    '2': {name: invalid.illegal.TODO.nim}

- comment: A documentation comment.
  name: comment.line.number-sign.doc-comment.nim
  match: (##\s*(TODO|todo)?).+$\n?
  captures:
    '1': {name: punctuation.definition.doc-comment.nim}
    '2': {name: invalid.illegal.TODO.nim}

- comment: An empty documentation comment.
  name: comment.line.number-sign.doc-comment.empty.nim
  match: (##\s*)$\n?
  captures:
    '1': {name: punctuation.definition.doc-comment.empty.nim}

- comment: A regular comment
  name: comment.line.number-sign.comment.nim
  match: (#\s*(TODO|todo)?).*$\n?
  captures:
    '1': {name: punctuation.definition.comment.nim}
    '2': {name: invalid.illegal.TODO.nim}

# Sub-Syntax selectors
- comment: C
  name: source.c.embedded.nim
  patterns:
  - begin: \{\.(emit:) ?(\"\"\")
    end: (\"\"\")\.?
    captures:
      '1': {name: keyword.other.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '1': {name: comment.syntax.nim}
    patterns:
    - name: keyword.operator.nim
      begin: \`
      end: \`
    - {include: source.c}

- comment: assembly
  name: source.asm.embedded.nim
  patterns:
  - begin: (asm )(\"\"\")
    end: \"\"\"
    captures:
      '1': {name: keyword.other.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '0': {name: comment.syntax.nim}
    patterns:
    - name: keyword.operator.nim
      begin: \`
      end: \`
    - {include: source.asm}

- comment: A nim procedure or method declaration
  name: meta.proc.nim
  patterns:
  - begin: (?<![\w\x{80}-\x{10FFFF}])(proc|func|method|template|macro|iterator|converter)\s+((\`[^\s\`]+\`)|([\w\x{80}-\x{10FFFF}]+))(\*)?
    end: (\=)
    beginCaptures:
      '1': {name: storage.type.proc.nim}
      '2': {name: entity.name.function.nim}
      '5': {name: keyword.operator.secondary.kw-public.nim}

    endCaptures:
      '1': {name: keyword.operator.nim}
    patterns:
      - comment: Generic
        match: \[[\w\x{80}-\x{10FFFF}]+\]
      - comment: Pattern
        begin: \{
        end: \}
        patterns:
        - name: string.something.nim
          begin: \"
          end: \"
        - name: entity.other.attribute-name.pattern.nim
          match: ([\w\x{80}-\x{10FFFF}]+)
      - comment: Parameters
        begin: \(
        end: \)
        patterns:
        - comment: Pattern
          begin: \{
          end: \}
          patterns:
          - name: string.something.nim
            begin: \"
            end: \"
          - name: entity.other.attribute-name.pattern.nim
            match: ([\[\]\w\x{80}-\x{10FFFF}]+)
        - {include: source.nim}
      - {include: source.nim}

- comment: Pragmas
  begin: \{\.
  end: \.?\}
  name: pragma
  patterns:
  - begin: \"
    end: \"
    name: string.something.nim
  - name: entity.other.attribute-name.pragma.nim
    match: ([\w\x{80}-\x{10FFFF}]+)

- comment: A discarded triple string literal comment
  name: comment.line.discarded.nim
  begin: discard \"\"\"
  end: \"\"\"

- comment: A float literal
  name: constant.numeric.float.decimal.nim
  match: (?<![\w\x{80}-\x{10FFFF}])(\d[_\d]*((\.[_\d]+([eE][\+\-]?\d[_\d]*)?)|([eE][\+\-]?\d[_\d]*)))('?([fF](32|64|128))|[fFdD])?   #' highlight-flaw-fixer-comment

- comment: A hexadecimal literal
  name: constant.numeric.integer.hexadecimal.nim
  match: (?<![\w\x{80}-\x{10FFFF}])(0[xX][0-9A-Fa-f][_0-9A-Fa-f]*)('?(([iIuUfF](8|16|32|64))|[uUfFdD]))?   #' highlight-flaw-fixer-comment

- comment: A base-8 integer literal
  name: constant.numeric.integer.octal.nim
  match: (?<![\w\x{80}-\x{10FFFF}])(0[ocC][0-7][_0-7]*)('?(([iIuUfF](8|16|32|64))|[uUfFdD]))?   #' highlight-flaw-fixer-comment

- comment: A base-2 integer literal
  name: constant.numeric.integer.binary.nim
  match: (?<![\w\x{80}-\x{10FFFF}])(0(b|B)[01][_01]*)('?(([iIuUfF](8|16|32|64))|[uUfFdD]))?   #' highlight-flaw-fixer-comment

- comment: A base-10 integer literal
  name: constant.numeric.integer.decimal.nim
  match: (?<![\w\x{80}-\x{10FFFF}])(\d[_\d]*)('?(([iIuUfF](8|16|32|64))|[uUfFdD]))?   #' highlight-flaw-fixer-comment

- comment: Language Constants.
  name: constant.language.nim
  match: (?<![\w\x{80}-\x{10FFFF}])(true|false|inf|nil)(?![\w\x{80}-\x{10FFFF}])

- comment: Primary branching keywords
  begin: (?:^|\s+|=)(when|if)\b
  end: (?=:)
  captures:
    '1': {name: keyword.control.primary.nim}
  endCaptures:
    '1': {name: control.variable.parameter.nim}
  patterns:
  - {include: source.nim}

- comment: Primary branching keyword 'case'
  begin: (?:^|\s+|=)(case)\b
  end: (?=\bof\b)
  captures:
    '1': {name: keyword.control.primary.nim}
  endCaptures:
    '1': {name: control.variable.parameter.nim}
  patterns:
  - {include: source.nim}

- comment: Secondary branching keywords and their conditions
  begin: (?:^|\s+)(of|else|elif)\b
  end: (?=:)
  captures:
    '1': {name: keyword.control.secondary.nim}
  endCaptures:
    '1': {name: control.variable.parameter.nim}
  patterns:
  - {include: source.nim}


- comment: Keywords that affect program control flow or scope.
  name: keyword.control.nim
  match: (?<![\w\x{80}-\x{10FFFF}])(await|block|break|continue|do|end|except|finally|raise|return|try|while|yield)(?![\w\x{80}-\x{10FFFF}])

- comment: Keyword boolean operators for expressions.
  name: keyword.operator.boolean.nim
  match: ((?<![\w\x{80}-\x{10FFFF}])(and|in|is|isnot|not|notin|or|xor)(?![\w\x{80}-\x{10FFFF}]))

- comment: Other keywords.
  name: keyword.other.nim
  match: ((?<![\w\x{80}-\x{10FFFF}])(addr|as|bind|cast|concept|const|converter|defer|discard|distinct|div|enum|export|from|import|include|let|mixin|object|of|out|ptr|ref|shl|shr|static|type|using|var)(?![\w\x{80}-\x{10FFFF}]))

- comment: Generic operators for expressions.
  name: keyword.operator.nim
  match: (\b()\b|(=|\+|-|\*|/|<|>|@|\$|~|&|%|!|\?|\^|\.|:|\\)+)

- comment: in keyword in a 'for' loop
  begin: (for)\s+
  end: (?=:)
  name: meta.forloop.nim
  captures:
    '1': { name: keyword.control.nim }
  patterns:
  - match: \ [\w\x{80}-\x{10FFFF},]+\s+(in)\s+
    captures:
      '1': { name: keyword.control.nim }
  - {include: source.nim}

- comment: Import syntax
  match: ((import)\s+[\.|\w|\/]+,?)
  captures:
    '2': { name: keyword.control.nim }
- match: (from)\s+[\/\w]+(?:\s+(?:as)\s+[\/\w]+)?\s+(?=import)
  captures:
    '1': { name: keyword.control.nim }

- comment: Destructure syntax
  begin: (var|let)\s*\(
  end: \)
  captures:
    '1': { name: keyword.other.nim }

- comment: Invalid and unused keywords.
  name: keyword.invalid.nim
  match: ((?<![\w\x{80}-\x{10FFFF}])(interface)(?![\w\x{80}-\x{10FFFF}]))

- comment: Common functions
  name: keyword.other.common.function.nim
  match: (?<![\w\x{80}-\x{10FFFF}])(new|GC_ref|GC_unref|assert|echo|defined|declared|newException|countup|countdown|len|high|low)(?![\w\x{80}-\x{10FFFF}])

- comment: Built-in, concrete types.
  name: storage.type.concrete.nim
  match: (?<![\w\x{80}-\x{10FFFF}])(((uint|int|float)(8|16|32|64)?)|clong|culong|cchar|cschar|cshort|cint|csize|clonglong|cfloat|cdouble|clongdouble|cuchar|cushort|cuint|culonglong|cstringArray|bool|string|auto|cstring|char|byte|tobject|typedesc|stmt|expr|any|untyped|typed)(?![\w\x{80}-\x{10FFFF}])

- comment: Built-in, generic types.
  name: storage.type.generic.nim
  match: (?<![\w\x{80}-\x{10FFFF}])(range|array|seq|tuple|Natural|set|ref|ptr|pointer)(?![\w\x{80}-\x{10FFFF}])

- comment: Function types
  name: storage.type.function.nim
  match: (?<![\w\x{80}-\x{10FFFF}])(proc|func|iterator|method|template|macro)(?![\w\x{80}-\x{10FFFF}])

- comment: Special types.
  name: storage.type.generic.nim
  match: (?<![\w\x{80}-\x{10FFFF}])(openarray|varargs|void)(?![\w\x{80}-\x{10FFFF}])

- comment: Other constants.
  name: support.constant.nim
  match: (?<![\w\x{80}-\x{10FFFF}])([A-Z][A-Z0-9_]+)(?![\w\x{80}-\x{10FFFF}])

- comment: Other types.
  name: support.type.nim
  match: (?<![\w\x{80}-\x{10FFFF}])([A-Z]\w+)(?![\w\x{80}-\x{10FFFF}])

- comment: Function call.
  name: support.function.any-method.nim
  match: (?<![\w\x{80}-\x{10FFFF}])(\w+)(?![\w\x{80}-\x{10FFFF}])(?=\()

- comment: (Raw) Triple Quoted String
  name: string.quoted.triple.nim
  begin: \w*\"\"\"
  end: \"\"\"[^\"]

- comment: Raw Double Quoted String
  name: string.quoted.double.raw.nim
  begin: \w+\"
  end: \"
  patterns:
  - match: \"\"

- comment: Double Quoted String
  name: string.quoted.double.nim
  begin: \"
  end: \"
  patterns:
    - include: '#escaped_char'

- comment: Single quoted character literal
  name: string.quoted.single.nim
  begin: \'
  end: \'
  patterns:
    - include: '#escaped_char'
    - name: invalid.illegal.character.nim
      match: ([^\'][^\']+?)   #' highlight-flaw-fixer-comment

- comment: Call syntax
  begin: ([\w\x{80}-\x{10FFFF}\`]+)\s*(?=\(|\[.+?\]\s*\()
  end: \)
  captures:
    '1': { name: support.function.any-method.nim }
  patterns:
    - {include: source.nim}

- comment: Command syntax
  match: ([\w\x{80}-\x{10FFFF}]+)(?=\s+[\w](?![\w\x{80}-\x{10FFFF}]+((?!\n)\s)+))
  captures:
    '1': { name: support.function.any-method.nim }
  patterns:
    - {include: source.nim}
- match: ([\w\x{80}-\x{10FFFF}]+)(?=\s+[\"\'\`])
  captures:
    '1': { name: support.function.any-method.nim }
  patterns:
    - {include: source.nim}

- comment: tmpl specifier
  match: (tmpl(i)?)(?=( (nim|html|xml|js|css|glsl|md))?\"\"\")
  captures:
    '1': {name: storage.type.function.nim}
    '2': {name: keyword.operator.nim}

- name: source.nim.embedded.nim
  patterns:
  - begin: (nim)(\"\"\")
    end: \"\"\"
    captures:
      '1': {name: storage.type.function.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '0': {name: comment.syntax.nim}
    patterns:
    - begin: (?<!\$)(\$)\(
      end: \)
      captures:
        '1': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)\{
      end: \}
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)(for|while|case|of|when|if|else|elif)( )
      end: (\{|\n)
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.control.nim}
      endCaptures:
        '1': {name: plain}
      patterns:
      - {include: source.nim}
    - match: (?<!\$)(\$[a-zA-Z0-9_]+)
      name: keyword.operator.nim
    - {include: source.nim}

- name: source.html.embedded.nim
  patterns:
  - begin: (html)(\"\"\")
    end: \"\"\"
    captures:
      '1': {name: storage.type.function.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '0': {name: comment.syntax.nim}
    patterns:
    - begin: (?<!\$)(\$)\(
      end: \)
      captures:
        '1': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)\{
      end: \}
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)(for|while|case|of|when|if|else|elif)( )
      end: (\{|\n)
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.control.nim}
      endCaptures:
        '1': {name: plain}
      patterns:
      - {include: source.nim}
    - match: (?<!\$)(\$[a-zA-Z0-9_]+)
      name: keyword.operator.nim
    - {include: text.xml}

- name: source.xml.embedded.nim
  patterns:
  - begin: (xml)(\"\"\")
    end: \"\"\"
    captures:
      '1': {name: storage.type.function.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '0': {name: comment.syntax.nim}
    patterns:
    - begin: (?<!\$)(\$)\(
      end: \)
      captures:
        '1': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)\{
      end: \}
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)(for|while|case|of|when|if|else|elif)( )
      end: (\{|\n)
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.control.nim}
      endCaptures:
        '1': {name: plain}
      patterns:
      - {include: source.nim}
    - match: (?<!\$)(\$[a-zA-Z0-9_]+)
      name: keyword.operator.nim
    - {include: text.xml}

- name: source.js.embedded.nim
  patterns:
  - begin: (js)(\"\"\")
    end: \"\"\"
    captures:
      '1': {name: storage.type.function.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '0': {name: comment.syntax.nim}
    patterns:
    - begin: (?<!\$)(\$)\(
      end: \)
      captures:
        '1': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)\{
      end: \}
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)(for|while|case|of|when|if|else|elif)( )
      end: (\{|\n)
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.control.nim}
      endCaptures:
        '1': {name: plain}
      patterns:
      - {include: source.nim}
    - match: (?<!\$)(\$[a-zA-Z0-9_]+)
      name: keyword.operator.nim
    - {include: source.js}

- name: source.css.embedded.nim
  patterns:
  - begin: (css)(\"\"\")
    end: \"\"\"
    captures:
      '1': {name: storage.type.function.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '0': {name: comment.syntax.nim}
    patterns:
    - begin: (?<!\$)(\$)\(
      end: \)
      captures:
        '1': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)\{
      end: \}
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)(for|while|case|of|when|if|else|elif)( )
      end: (\{|\n)
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.control.nim}
      endCaptures:
        '1': {name: plain}
      patterns:
      - {include: source.nim}
    - match: (?<!\$)(\$[a-zA-Z0-9_]+)
      name: keyword.operator.nim
    - {include: source.css}

- name: source.glsl.embedded.nim
  patterns:
  - begin: (glsl)(\"\"\")
    end: \"\"\"
    captures:
      '1': {name: storage.type.function.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '0': {name: comment.syntax.nim}
    patterns:
    - begin: (?<!\$)(\$)\(
      end: \)
      captures:
        '1': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)\{
      end: \}
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)(for|while|case|of|when|if|else|elif)( )
      end: (\{|\n)
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.control.nim}
      endCaptures:
        '1': {name: plain}
      patterns:
      - {include: source.nim}
    - match: (?<!\$)(\$[a-zA-Z0-9_]+)
      name: keyword.operator.nim
    - {include: source.glsl}

- name: source.markdown.embedded.nim
  patterns:
  - begin: (md)(\"\"\")
    end: \"\"\"
    captures:
      '1': {name: storage.type.function.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '0': {name: comment.syntax.nim}
    patterns:
    - begin: (?<!\$)(\$)\(
      end: \)
      captures:
        '1': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)\{
      end: \}
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)(for|while|case|of|when|if|else|elif)( )
      end: (\{|\n)
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.control.nim}
      endCaptures:
        '1': {name: plain}
      patterns:
      - {include: source.nim}
    - match: (?<!\$)(\$[a-zA-Z0-9_]+)
      name: keyword.operator.nim
    - {include: text.html.markdown.multimarkdown}

repository:
  escaped_char:
    patterns:
    - name: constant.character.escape.newline.nim
      match: \\[nN]
    - name: constant.character.escape.carriagereturn.nim
      match: \\[cC]|\\[rR]
    - name: constant.character.escape.linefeed.nim
      match: \\[lL]
    - name: constant.character.escape.formfeed.nim
      match: \\[fF]
    - name: constant.character.escape.tabulator.nim
      match: \\[tT]
    - name: constant.character.escape.verticaltabulator.nim
      match: \\[vV]
    - name: constant.character.escape.double-quote.nim
      match: \\\"
    - name: constant.character.escape.single-quote.nim
      match: \\'
    - name: constant.character.escape.chardecimalvalue.nim
      match: \\[0-9]+
    - name: constant.character.escape.alert.nim
      match: \\[aA]
    - name: constant.character.escape.backspace.nim
      match: \\[bB]
    - name: constant.character.escape.escape.nim
      match: \\[eE]
    - name: constant.character.escape.hex.nim
      match: \\[xX][0-9A-Fa-f]{2}
    - name: constant.character.escape.backslash.nim
      match: \\\\
...

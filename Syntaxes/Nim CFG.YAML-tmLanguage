# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Nim Config
scopeName: source.nimcfg
fileTypes: ["nimcfg"]

patterns:
  - include: '#comments'
  - include: '#directives'
  - include: '#assignements'


repository:
  comments:
    patterns:
      - begin: '(#)(?: *(TODO|todo)\b)?'
        beginCaptures:
          '1': {name: punctuation.definition.comment.ncfg}
          '2': {name: invalid.deprecated.ncfg}
        end: '$\n?'
        name: comment.line.number-sign.ncfg

  directives:
    patterns:
      - include: '#if-stmt'
      - match: '(@)(else) *(:)?'
        captures:
          '1': {name: punctuation.definition.keyword.ncfg}
          '2': {name: keyword.control.conditional.else.ncfg}
          '3': {name: punctuation.section.block.begin.ncfg}
      - match: '(@)(end)'
        captures:
          '1': {name: punctuation.definition.keyword.ncfg}
          '2': {name: keyword.control.conditional.end.ncfg}
      - include: '#env-stmt'

  assignements:
    patterns:
      - begin: (--?)?[A-Za-z]\w*
        beginCaptures:
          '1': {name: punctuation.definition.variable.ncfg}
        end: '(?:(\[)([A-Za-z]\w*)(]))? *(?=:|%?=)|$\n?'
        endCaptures:
          '1': {name: punctuation.section.brackets.begin.ncfg}
          '2': {name: entity.other.attribute-name.ncfg}
          '3': {name: punctuation.section.brackets.end.ncfg}
        patterns:
          - include: '#comments'
          - match: '(\.)[A-Za-z]\w*'
            captures:
              '1': {name: punctuation.accessor.dot.ncfg}
      - begin: ':|%?='
        beginCaptures:
          '0': {name: punctuation.separator.key-value.ncfg}
        end: $\n?
        patterns:
          - include: '#comments'
          - include: '#exprs'
          - match: '&'
            name: keyword.operator.ncfg
          - match: '[:=]'
            name: punctuation.separator.key-value.ncfg

  if-stmt:
    patterns:
      - begin: '(@)(?:(elif)|(if))\b'
        beginCaptures:
          '1': {name: punctuation.definition.keyword.ncfg}
          '2': {name: keyword.control.conditional.elseif.ncfg}
          '3': {name: keyword.control.conditional.if.ncfg}
        end: '(:)|$'
        endCaptures:
          '1': {name: punctuation.section.block.begin.ncfg}
        patterns:
          - include: '#cond-expr'

  cond-expr:
    patterns:
      - include: '#groups'
      - include: '#language-constants'
      - match: '(?:and|or|not)\b'
        name: keyword.operator.logical.ncfg
      - match: '[A-Za-z]\w*'

  groups:
    patterns:
      - begin: '\('
        beginCaptures:
          '0': {name: punctuation.section.group.begin.ncfg}
        end: '\)'
        name: meta.group.ncfg
        endCaptures:
          '0': {name: punctuation.section.group.end.ncfg}
        patterns:
          - include: '#cond-expr'

  env-stmt:
    patterns:
      - begin: '(@)((?:put|append|prepend)[Ee]nv|write)\b'
        beginCaptures:
          '1': {name: punctuation.definition.keyword.ncfg}
          '2': {name: keyword.other.ncfg}
        end: '$\n?'
        patterns:
          - include: '#exprs'

  exprs:
    patterns:
      - include: '#str-lits'
      - include: '#numbers'
      - include: '#language-constants'
      - match: '[A-Za-z]\w*'
        name: string.unquoted.ncfg

  str-lits:
    patterns:
    - include: '#triplestr-lit'
    - include: '#rstr-lit'
    - include: '#str-lit'

  triplestr-lit:
    patterns:
      - begin: '([Rr])?(""")'
        beginCaptures:
          '1': {name: storage.type.ncfg}
          '2': {name: string.quoted.triple.ncfg punctuation.definition.string.begin.ncfg}
        end: '"""(?!")'
        endCaptures:
          '0': {name: string.quoted.triple.ncfg punctuation.definition.string.end.ncfg}
        contentName: string.quoted.triple.ncfg

  rstr-lit:
    patterns:
      - begin: '([Rr])(")'
        beginCaptures:
          '1': {name: storage.type.ncfg}
          '2': {name: string.quoted.double.ncfg punctuation.definition.string.begin.ncfg}
        end: '("(?!"))|(\n)'
        endCaptures:
          '1': {name: string.quoted.double.ncfg punctuation.definition.string.end.ncfg}
          '2': {name: string.quoted.double.ncfg invalid.illegal.unclosed-string.ncfg}
        contentName: string.quoted.double.ncfg
        patterns:
          - match: '""'
            name: constant.character.escape.ncfg
  
  str-lit:
    patterns:
      - begin: '"'
        beginCaptures:
          '0': {name: punctuation.definition.string.begin.ncfg}
        end: '(")|(\n)'
        endCaptures:
          '1': {name: punctuation.definition.string.end.ncfg}
          '2': {name: invalid.illegal.ncfg}
        name: string.quoted.double.ncfg
        patterns:
          - match: '\\(?:[ABCEFLNPRTVabceflnprtv"''\\]|\d+|[Xx]\h{2}|[Uu](?:\h{4}|\{\h+}))'
            name: constant.character.escape.ncfg
          - match: \\
            name: invalid.illegal.lone-escape.ncfg

  numbers:
    patterns:
      - match: '(?x:
          \b(0[Xx])
          (\h(?:_?\h)*)
          (''?[Ii](?:8|16|32|64))?
        )'
        captures:
          '0': {name: meta.number.integer.hexadecimal.ncfg}
          '1': {name: constant.numeric.base.ncfg}
          '2': {name: constant.numeric.value.ncfg}
          '3': {name: constant.numeric.suffix.ncfg}

      - match: '(?x:
          \b(0o)
          ([0-7](?:_?[0-7])*)
          (''?[Ii](?:8|16|32|64))?
        )'
        captures:
          '0': {name: meta.number.integer.octal.ncfg}
          '1': {name: constant.numeric.base.ncfg}
          '2': {name: constant.numeric.value.ncfg}
          '3': {name: constant.numeric.suffix.ncfg}

      - match: '(?x:
          \b(0[Bb])
          ([01](?:_?[01])*)
          (''?[Ii](?:8|16|32|64))?
        )'
        captures:
          '0': {name: meta.number.integer.binary.ncfg}
          '1': {name: constant.numeric.base.ncfg}
          '2': {name: constant.numeric.value.ncfg}
          '3': {name: constant.numeric.suffix.ncfg}

      - match: '(?x:
          \b(\d(?:_?\d)*)
          (''?[Ii](?:8|16|32|64))?
        )'
        captures:
          '0': {name: meta.number.integer.decimal.ncfg}
          '1': {name: constant.numeric.value.ncfg}
          '2': {name: constant.numeric.suffix.ncfg}

  language-constants:
    patterns:
      - match: '\b(?:true|false|on|off)\b'
        name: constant.language.boolean.ncfg


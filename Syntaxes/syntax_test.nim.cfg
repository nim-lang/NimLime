# SYNTAX TEST "Packages/NimLime/Syntaxes/Nim CFG.sublime-syntax"
# <- source.nimcfg comment.line.number-sign.nimcfg punctuation.definition.comment.nimcfg

#[
^^ comment.block.nimcfg punctuation.definition.comment.begin
  block comment
#^^^^^^^^^^^^^^ comment.block.nimcfg
  #[
    nested comment
#^^^^^^^^^^^^^^^^^ comment.block.nimcfg comment.block.nimcfg
  ]#
#^^^ comment.block.nimcfg comment.block.nimcfg
# ^^ punctuation.definition.comment.end.nimcfg
]#
#^ comment.block.nimcfg punctuation.definition.comment.end.nimcfg

 --experimental
#^^ punctuation.definition.variable.nimcfg
 --name:"A\nm\L\j\x21"
#^^ punctuation.definition.variable.nimcfg
#      ^ punctuation.separator.key-value.nimcfg
#       ^^^^^^^^^^^^^^ meta.string.nimcfg string.quoted.double.nimcfg
#       ^ punctuation.definition.string.begin.nimcfg
#         ^^ constant.character.escape.nimcfg
#              ^ invalid.illegal.lone-escape.nimcfg
#                ^^^^ constant.character.escape.nimcfg
#                    ^ punctuation.definition.string.end.nimcfg
  multi="""
#       ^^^ meta.string.nimcfg string.quoted.double.block.nimcfg punctuation.definition.string.begin.nimcfg
  """
#^^^^ meta.string.nimcfg string.quoted.double.block.nimcfg
# ^^^ punctuation.definition.string.end.nimcfg
  rstr %= R"no \escape \chars\ only """
#      ^^ punctuation.separator.key-value.nimcfg
#         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.string.nimcfg
#         ^ storage.type.string.nimcfg
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ string.quoted.double.nimcfg
#          ^ punctuation.definition.string.begin.nimcfg
#                                   ^^ constant.character.escape.nimcfg
#                                     ^ punctuation.definition.string.end.nimcfg


@if windows or android and not (release or danger):
#<- punctuation.definition.keyword.nimcfg
#^^ keyword.control.conditional.if.nimcfg
#           ^^ keyword.operator.logical.nimcfg
#                      ^^^ keyword.operator.logical.nimcfg
#                          ^^^ keyword.operator.logical.nimcfg
#                              ^^^^^^^^^^^^^^^^^^^ meta.group.nimcfg
#                              ^ punctuation.section.group.begin.nimcfg
#                                       ^^ keyword.operator.logical.nimcfg
#                                                ^ punctuation.section.group.end.nimcfg
#                                                 ^ punctuation.section.block.begin.nimcfg
  -d:abc
# ^ punctuation.definition.variable.nimcfg
#   ^ punctuation.separator.key-value.nimcfg
  --define:symbol
# ^^ punctuation.definition.variable.nimcfg
#         ^ punctuation.separator.key-value.nimcfg
@elif release:
#^^^^^^^^^^^^^^ meta.block.nimcfg
#<- punctuation.definition.keyword.nimcfg
#^^^^ keyword.control.conditional.elseif.nimcfg
#            ^ punctuation.section.block.begin.nimcfg
  amd64.windows.gcc.path = "/usr/bin"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.nimcfg
#      ^ punctuation.accessor.dot.nimcfg
#                        ^ punctuation.separator.key-value.nimcfg
#                          ^^^^^^^^^^ meta.string.nimcfg string.quoted.double.nimcfg
#                          ^ punctuation.definition.string.begin.nimcfg
#                                   ^ punctuation.definition.string.end.nimcfg
@if osx:
  clang.cpp.options.linker = "-Wl,-rpath=.:/usr/local/lib:/usr/pkg/lib:/usr/X11R6/lib" & Foo
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.nimcfg meta.block.nimcfg
#                          ^ punctuation.separator.key-value.nimcfg
#                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.string.nimcfg string.quoted.double.nimcfg
#                            ^ punctuation.definition.string.begin.nimcfg
#                                                                                    ^ punctuation.definition.string.end.nimcfg
#                                                                                      ^ keyword.operator.nimcfg
  --define:key=on
#^^^^^^^^^^^^^^^^ meta.block.nimcfg meta.block.nimcfg
# ^^ punctuation.definition.variable.nimcfg
#         ^ punctuation.separator.key-value.nimcfg
#          ^^^ string.unquoted.nimcfg
#             ^ punctuation.separator.key-value.nimcfg
#              ^^ constant.language.boolean.nimcfg
@end

@else
#<- punctuation.definition.keyword.nimcfg
#^^^^ meta.block.nimcfg
#^^^^ keyword.control.conditional.else.nimcfg
  gcc.options.always %= "-w ${gcc.maxerrorsimpl}"
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.block.nimcfg
#            ^ punctuation.accessor.dot.nimcfg
#                    ^^ punctuation.separator.key-value.nimcfg
#                       ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.string.nimcfg string.quoted.double.nimcfg
#                       ^ punctuation.definition.string.begin.nimcfg
#                                               ^ punctuation.definition.string.end.nimcfg
@else

@end
#<- punctuation.definition.keyword.nimcfg
#^^^ keyword.control.conditional.end.nimcfg

@end

@if not and windows:
#   ^^^ keyword.operator.logical.nimcfg
#       ^^^^^ invalid.illegal.nimcfg
#                  ^ punctuation.separator.key-value.nimcfg
@if or and linux:
#   ^^ invalid.illegal.nimcfg
#      ^^^ keyword.operator.logical.nimcfg
#               ^ punctuation.section.block.begin.nimcfg
@end

@if not:
#      ^ invalid.illegal.nimcfg
@end

@putenv "KEY" "VALUE" "2 args only!"
#^^^^^^ keyword.other.nimcfg
#       ^^^^^ meta.string.nimcfg string.quoted.double.nimcfg
#             ^ punctuation.definition.string.begin.nimcfg
#                   ^ punctuation.definition.string.end.nimcfg
@appendenv X 2
#^^^^^^^^^ keyword.other.nimcfg
#          ^ string.unquoted.nimcfg
#            ^ meta.number.integer.decimal.nimcfg constant.numeric.value.nimcfg
@prependenv B false
#^^^^^^^^^^ keyword.other.nimcfg
#           ^ string.unquoted.nimcfg
#             ^^^^^ constant.language.boolean.nimcfg
@write "something" "only one thing"
#<- punctuation.definition.keyword.nimcfg
#^^^^^ keyword.other.nimcfg
#      ^^^^^^^^^^^ meta.string.nimcfg string.quoted.double.nimcfg

# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Nim Config
scopeName: source.nimcfg
fileTypes: ["cfg"]
uuid: 8fb54f5c-6f67-4d13-9dcc-52650ea4cb3e

patterns:
- name: comment.line.number-sign.nimcfg
  match: (#\s*(TODO|todo)?).*$\n?
  captures:
    '1': {name: punctuation.definition.comment.nimcfg}
    '2': {name: invalid.illegal.TODO.nimcfg}

- comment: Section declarations
  name: support.type.nimcfg
  match: \[.+\]

- comment: Keywords that affect program control flow or scope.
  begin: \@\b(if|elif|else)\b
  end: \@\b(end)
  captures:
    '0': {name: keyword.control.nimcfg}
  patterns:
  - {include: source.nimcfg}

- comment: Key declarations
  begin: ([a-zA-Z0-9_\.]+)\s*(\=)
  end: \n
  patterns:

  - name: constant.numeric.float.decimal.nimcfg
    match: \b((\d[_\d]*\.[_\d]+([eE][\+\-]?\d[_\d]*)?)|([eE][\+\-]?\d[_\d]*))('[fF](32|64))?

  - name: constant.numeric.integer.hexadecimal.nimcfg
    match: \b(0[xX][0-9A-Fa-f][_0-9A-Fa-f]*)('[iIuU](8|16|32|64))?

  - comment: For simplicity's sake, we don't enforce floats only having 32 and
             64 prefix types.
    name: constant.numeric.integer.octal.nimcfg
    match: \b(0o[0-7][_0-7]*)

  - name: constant.numeric.integer.binary.nimcfg
    match: \b(0(b|B)[01][_01]*)

  - name: constant.numeric.integer.decimal.nimcfg
    match: \b(\d[_\d]*)

  - comment: Language Constants.
    name: constant.language.nimcfg
    match: \b(true|false)\b

  - comment: Raw Double Quoted String
    name: string.quoted.double.raw.nimcfg
    begin: r\"
    end: \"
    patterns:
    - match: \"\"

  - comment: Double Quoted String
    name: string.quoted.double.nimcfg
    begin: \"
    end: \"
    captures:
      '1': {name: storage.type.function.nimcfg}
    patterns:
    - match: (\\([abenrclftv\\]|["']|[0-9])|x[0-9A-Fa-f]{2})

  - comment: Single quoted character literal
    name: string.quoted.single.nimcfg
    match: \'(\\\d{1,3}|\\?[^\n]?)\'

  - comment: Value declarations
    match: \b(.+)\b
    captures:
      '1': {name: string.raw.nimcfg}

...

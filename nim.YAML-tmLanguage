# [PackageDev] target_format: plist, ext: tmLanguage
# TODO:
# Determine solid nim ident pattern & replace any general \w with this
---
name: Nim
scopeName: source.nim
fileTypes: ["nim"]
uuid: fa6f2c1c-dd3f-4bcd-b2be-d05312be4080

patterns:
- comment: A documentation comment.
  name: comment.line.number-sign.doc-comment.nim
  match: (##\s*(TODO|todo)?).*$\n?
  captures:
    '1': {name: punctuation.definition.comment.nim}
    '2': {name: invalid.illegal.TODO.nim}

- comment: A regular comment
  name: comment.line.number-sign.comment.nim
  match: (#\s*(TODO|todo)?).*$\n?
  captures:
    '1': {name: punctuation.definition.comment.nim}
    '2': {name: invalid.illegal.TODO.nim}

# Sub-Syntax selectors
- comment: C
  name: source.c.embedded.nim
  patterns:
  - begin: \{\.(emit:) ?(\"\"\")
    end: (\"\"\")\.?
    captures:
      '1': {name: keyword.other.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '1': {name: comment.syntax.nim}
    patterns:
    - name: keyword.operator.nim
      begin: \`
      end: \`
    - {include: source.c}

- comment: assembly
  name: source.asm.embedded.nim
  patterns:
  - begin: (asm )(\"\"\")
    end: \"\"\"
    captures:
      '1': {name: keyword.other.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '0': {name: comment.syntax.nim}
    patterns:
    - name: keyword.operator.nim
      begin: \`
      end: \`
    - {include: source.asm}

- comment: A nim procedure or method declaration
  name: meta.proc.nim
  patterns:
  - begin: \b(proc|method|template|type|macro|iterator|converter)\s+(\`([^\s\`]+)\`|(\w+))(\*)?
    end: (\=)
    beginCaptures:
      '1': {name: storage.type.proc.nim}
      '2': {name: entity.name.function.nim}
      '5': {name: keyword.operator.nim}
    endCaptures:
      '1': {name: keyword.operator.nim}
    patterns:
      - comment: Generic
        match: \[\w+\]
      - comment: Pattern
        begin: \{
        end: \}
        patterns:
        - name: string.something.nim
          begin: \"
          end: \"
        - name: entity.other.attribute-name.pattern.nim
          match: \w+
      - comment: Parameters
        begin: \(
        end: \)
        patterns:
        - comment: Pattern
          begin: \{
          end: \}
          patterns:
          - name: string.something.nim
            begin: \"
            end: \"
          - name: entity.other.attribute-name.pattern.nim
            match: \w+
        - {include: source.nim}
      - {include: source.nim}

- comment: Pragmas
  begin: \{\.
  end: \.?\}
  patterns:
  - begin: \"
    end: \"
    name: string.something.nim
  - name: entity.other.attribute-name.pragma.nim
    match: \w+

- comment: A discarded triple string literal comment
  name: comment.line.discarded.nim
  begin: discard \"\"\"
  end: \"\"\"

- comment: A float literal
  name: constant.numeric.float.decimal.nim
  match: \b((\d[_\d]*\.[_\d]+([eE][\+\-]?\d[_\d]*)?)|([eE][\+\-]?\d[_\d]*))('[fF](32|64))?

- comment: A hexadecimal literal
  name: constant.numeric.integer.hexadecimal.nim
  match: \b(0[xX]\h[_\h]*)('(([iIuUfF](8|16|32|64))|[uU]))?

- comment: A base-8 integer literal
  name: constant.numeric.integer.octal.nim
  match: \b(0o[0-7][_0-7]*)('(([iIuUfF](8|16|32|64))|[uU]))?

- comment: A base-2 integer literal
  name: constant.numeric.integer.binary.nim
  match: \b(0(b|B)[01][_01]*)('(([iIuUfF](8|16|32|64))|[uU]))?

- comment: A base-10 integer literal
  name: constant.numeric.integer.decimal.nim
  match: \b(\d[_\d]*)('(([iIuUfF](8|16|32|64))|[uU]))?

- comment: Language Constants.
  name: constant.language.nim
  match: \b(true|false|inf|nil)\b

- comment: Keywords that affect program control flow or scope.
  name: keyword.control.nim
  match: \b(block|break|case|continue|do|elif|else|end|except|finally|if|raise|return|try|when|while|yield)\b

- comment: Keyword boolean operators for expressions.
  name: keyword.operator.boolean.nim
  match: (\b(and|in|is|isnot|not|notin|or|xor)\b)

- comment: Generic operators for expressions.
  name: keyword.operator.nim
  match: (\b()\b|(=|\+|-|\*|/|<|>|@|\$|~|&|%|!|\?|\^|\.|:|\\)+)

- comment: in keyword in a 'for' loop
  begin: (for)\s+
  end: \:()
  name: meta.forloop.nim
  captures:
    '1': { name: keyword.control.nim }
  patterns:
  - match: \w+\s+(in)\s+
    captures:
      '1': { name: keyword.control.nim }
  - {include: source.nim}

- comment: Import syntax
  match: ((import)\s+[\/\w]+,?)
  captures:
    '2': { name: keyword.control.nim }
- match: (from)\s+[\/\w]+\s+(?=import)
  captures:
    '1': { name: keyword.control.nim }

- comment: Other keywords.
  name: keyword.other.nim
  match: (\b(addr|as|atomic|bind|cast|const|converter|defer|discard|distinct|div|enum|export|include|let|mixin|object|of|ptr|ref|shl|shr|static|type|var)\b)

- comment: Destructure syntax
  begin: (var|let)\s*\(
  end: \)
  captures:
    '1': { name: keyword.other.nim }

- comment: Invalid and unused keywords.
  name: keyword.invalid.nim
  match: (\b(generic|interface|lambda|out|shared|with|without)\b)

- comment: Common functions
  name: support.function.any-method.nim
  match: \b(len|high|low)\b

- comment: Built-in, concrete types.
  name: storage.type.concrete.nim
  match: \b(((uint|int|float)(8|16|32|64)?)|bool|string|auto|cstring|char|byte|tobject|typedesc|stmt|expr)\b

- comment: Built-in, generic types.
  name: storage.type.generic.nim
  match: \b(range|array|seq|tuple|natural|set|ref|ptr)\b

- comment: Function types
  name: storage.type.function.nim
  match: \b(proc|iterator|method|type|template|macro)\b

- comment: Special types.
  name: storage.type.generic.nim
  match: \b(openarray|varargs|void)\b

- comment: (Raw) Triple Quoted String
  name: string.quoted.triple.nim
  begin: r?\"\"\"
  end: \"\"\"[^\"]

- comment: Raw Double Quoted String
  name: string.quoted.double.raw.nim
  begin: r\"
  end: \"
  patterns:
  - match: \"\"

- comment: Double Quoted String
  name: string.quoted.double.nim
  begin: \"
  end: \"
  patterns:
    - include: '#escaped_char'

- comment: Single quoted character literal
  name: string.quoted.single.nim
  begin: \'
  end: \'
  patterns:
    - name: invalid.illegal.character.nim
      match: \\n
    - include: '#escaped_char'
    - name: invalid.illegal.character.nim
      match: ([^\']{2,}?)

- comment: Call syntax
  begin: ([\w\`]+)\s*(?=\(|\[.+?\]\s*\()
  end: \)
  captures:
    '1': { name: support.function.any-method.nim }
  patterns:
    - {include: source.nim}

- comment: Command syntax
  match: (\w+)(?=\s+[\w](?!\w+((?!\n)\s)+))
  captures:
    '1': { name: support.function.any-method.nim }
  patterns:
    - {include: source.nim}
- match: (\w+)(?=\s+[\"\'\`])
  captures:
    '1': { name: support.function.any-method.nim }
  patterns:
    - {include: source.nim}

- comment: tmpl specifier
  match: (tmpl(i)?)(?=( (nim|html|xml|js|css|glsl|md))?\"\"\")
  captures:
    '1': {name: storage.type.function.nim}
    '2': {name: keyword.operator.nim}

- name: source.nim.embedded.nim
  patterns:
  - begin: (nim)(\"\"\")
    end: \"\"\"
    captures:
      '1': {name: storage.type.function.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '0': {name: comment.syntax.nim}
    patterns:
    - begin: (?<!\$)(\$)\(
      end: \)
      captures:
        '1': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)\{
      end: \}
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)(for|while|case|of|when|if|else|elif)( )
      end: (\{|\n)
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.control.nim}
      endCaptures:
        '1': {name: plain}
      patterns:
      - {include: source.nim}
    - match: (?<!\$)(\$[a-zA-Z0-9_]+)
      name: keyword.operator.nim
    - {include: source.nim}

- name: source.html.embedded.nim
  patterns:
  - begin: (html)(\"\"\")
    end: \"\"\"
    captures:
      '1': {name: storage.type.function.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '0': {name: comment.syntax.nim}
    patterns:
    - begin: (?<!\$)(\$)\(
      end: \)
      captures:
        '1': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)\{
      end: \}
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)(for|while|case|of|when|if|else|elif)( )
      end: (\{|\n)
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.control.nim}
      endCaptures:
        '1': {name: plain}
      patterns:
      - {include: source.nim}
    - match: (?<!\$)(\$[a-zA-Z0-9_]+)
      name: keyword.operator.nim
    - {include: text.xml}

- name: source.xml.embedded.nim
  patterns:
  - begin: (xml)(\"\"\")
    end: \"\"\"
    captures:
      '1': {name: storage.type.function.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '0': {name: comment.syntax.nim}
    patterns:
    - begin: (?<!\$)(\$)\(
      end: \)
      captures:
        '1': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)\{
      end: \}
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)(for|while|case|of|when|if|else|elif)( )
      end: (\{|\n)
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.control.nim}
      endCaptures:
        '1': {name: plain}
      patterns:
      - {include: source.nim}
    - match: (?<!\$)(\$[a-zA-Z0-9_]+)
      name: keyword.operator.nim
    - {include: text.xml}

- name: source.js.embedded.nim
  patterns:
  - begin: (js)(\"\"\")
    end: \"\"\"
    captures:
      '1': {name: storage.type.function.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '0': {name: comment.syntax.nim}
    patterns:
    - begin: (?<!\$)(\$)\(
      end: \)
      captures:
        '1': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)\{
      end: \}
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)(for|while|case|of|when|if|else|elif)( )
      end: (\{|\n)
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.control.nim}
      endCaptures:
        '1': {name: plain}
      patterns:
      - {include: source.nim}
    - match: (?<!\$)(\$[a-zA-Z0-9_]+)
      name: keyword.operator.nim
    - {include: source.js}

- name: source.css.embedded.nim
  patterns:
  - begin: (css)(\"\"\")
    end: \"\"\"
    captures:
      '1': {name: storage.type.function.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '0': {name: comment.syntax.nim}
    patterns:
    - begin: (?<!\$)(\$)\(
      end: \)
      captures:
        '1': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)\{
      end: \}
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)(for|while|case|of|when|if|else|elif)( )
      end: (\{|\n)
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.control.nim}
      endCaptures:
        '1': {name: plain}
      patterns:
      - {include: source.nim}
    - match: (?<!\$)(\$[a-zA-Z0-9_]+)
      name: keyword.operator.nim
    - {include: source.css}

- name: source.glsl.embedded.nim
  patterns:
  - begin: (glsl)(\"\"\")
    end: \"\"\"
    captures:
      '1': {name: storage.type.function.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '0': {name: comment.syntax.nim}
    patterns:
    - begin: (?<!\$)(\$)\(
      end: \)
      captures:
        '1': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)\{
      end: \}
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)(for|while|case|of|when|if|else|elif)( )
      end: (\{|\n)
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.control.nim}
      endCaptures:
        '1': {name: plain}
      patterns:
      - {include: source.nim}
    - match: (?<!\$)(\$[a-zA-Z0-9_]+)
      name: keyword.operator.nim
    - {include: source.glsl}

- name: source.markdown.embedded.nim
  patterns:
  - begin: (md)(\"\"\")
    end: \"\"\"
    captures:
      '1': {name: storage.type.function.nim}
      '2': {name: comment.syntax.nim}
    endCaptures:
      '0': {name: comment.syntax.nim}
    patterns:
    - begin: (?<!\$)(\$)\(
      end: \)
      captures:
        '1': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)\{
      end: \}
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.operator.nim}
      patterns:
      - {include: source.nim}
    - begin: (?<!\$)(\$)(for|while|case|of|when|if|else|elif)( )
      end: (\{|\n)
      captures:
        '1': {name: keyword.operator.nim}
        '2': {name: keyword.control.nim}
      endCaptures:
        '1': {name: plain}
      patterns:
      - {include: source.nim}
    - match: (?<!\$)(\$[a-zA-Z0-9_]+)
      name: keyword.operator.nim
    - {include: text.html.markdown.multimarkdown}


repository:
  escaped_char:
    patterns:
    - name: constant.character.escape.newline.nim
      match: \\[nN]
    - name: constant.character.escape.carriagereturn.nim
      match: \\[cC]|\\[rR]
    - name: constant.character.escape.linefeed.nim
      match: \\[lL]
    - name: constant.character.escape.formfeed.nim
      match: \\[fF]
    - name: constant.character.escape.tabulator.nim
      match: \\[tT]
    - name: constant.character.escape.verticaltabulator.nim
      match: \\[vV]
    - name: constant.character.escape.double-quote.nim
      match: \\\"
    - name: constant.character.escape.single-quote.nim
      match: \\'
    - name: constant.character.escape.chardecimalvalue.nim
      match: \\[0-9]+
    - name: constant.character.escape.alert.nim
      match: \\[aA]
    - name: constant.character.escape.backspace.nim
      match: \\[bB]
    - name: constant.character.escape.escape.nim
      match: \\[eE]
    - name: constant.character.escape.hex.nim
      match: \\[xX]\h\h
    - name: constant.character.escape.backslash.nim
      match: \\\\
...
